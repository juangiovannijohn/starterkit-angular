import { Component } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { customPasswordValidator } from 'src/app/shared/helpers/passwordValidator';
import { SupabaseService } from 'src/app/shared/services/supabase.service';

//ESTE COMPONENTE FUE PENSADO PARA HACER DINÁMICO LA CREACIÓN DE VARIOS CLUBES CON LA MISMA APP. 
// PARA LO CUAL PRIMERO SE CREA UN SUPER USUARIO CON LOS DATOS DEL CLUB AL CUAL VA A ADMINISTRAR, SU ROL POR DEFECTO ES ADMIN. 
// SIN EMBARGO POR UN IMPEDIMENTO EN QUE SUPABASE NO TIENE TRANSACTIONS EN SU LIBRERÍA HACER QUE EL CÓDIGO SEA MUY SUCIO. 
// SE PREFIRIÓ NO CONTINUAR CON EL DESARROLLO DE LA LÓGICA

@Component({
  selector: 'app-signup-company',
  templateUrl: './signup-company.component.html',
  styleUrls: ['./signup-company.component.css']
})
export class SignupCompanyComponent {
  loading = false
  showAlertModal: boolean = false;
  classesModal: string = '';
  messageModal: string = '';
  
  signupForm = this.formBuilder.group({
    email: ['', [Validators.required, Validators.email]],
    pass: ['', [Validators.required, customPasswordValidator()]],
    passConfirm: ['', [Validators.required, customPasswordValidator()]],
    companyName:  ['', [Validators.required]],
    companyDescription: null,
    companyDirection:['', [Validators.required]],
  })

  constructor(private router: Router, private route: ActivatedRoute,
    private supabase: SupabaseService,
    private formBuilder: FormBuilder
  ) { }
  async signup(): Promise<void> {
    const pass = this.signupForm.value.pass;
    const passConfirm = this.signupForm.value.passConfirm;

    const passControl = this.signupForm.get('pass');
 if (passControl && passControl.hasError('customPassword') && this.signupForm.invalid) {
      const errorMessage = passControl.getError('customPassword');
      this.openAlert('text-red-600', errorMessage);
      this.signupForm.reset();
    } else if (pass !== passConfirm) {
      this.openAlert('text-red-600', 'Las contraseñas no coinciden.');
      this.signupForm.reset();
    } else if (this.signupForm.invalid) {
      this.openAlert('text-red-600',  'Formulario incompleto');
      this.signupForm.reset();
    } else {
      this.processSignup();
    }
  }
  private async processSignup(): Promise<void> {
    try {
      this.loading = true;
      const email = this.signupForm.value.email as string;
      const pass = this.signupForm.value.pass as string;
      const companyName = this.signupForm.value.companyName as string;
      const companyDescription = this.signupForm.value.companyDescription ? this.signupForm.value.companyDescription as string : null;
      const companyDirection = this.signupForm.value.companyDirection as string;
      const { data, errors } = await this.supabase.signUpCompany(email, pass, companyName, companyDescription, companyDirection  );
console.log({data})
console.log({errors})
      if (errors.length > 0) {
        console.log({errors})
        throw errors;
      }
      console.log({data})
      this.openAlert('text-slate-600', 'Revise su casilla de correos para confirmar su email');
    } catch (error) {
      console.error('Error al crear el usuario:', error);
      this.openAlert('text-red-600', 'Error al crear el usuario');
    } finally {
      this.signupForm.reset();
      this.loading = false;
    }
  }

  openAlert(className: string, message: string) {
    this.messageModal = message;
    this.classesModal = className;
    this.showAlertModal = true;
  }
  closeAlert() {
    this.messageModal = '';
    this.classesModal = '';
    this.showAlertModal = false;
    this.supabase.signOut();
    this.router.navigate(['login'], {
      queryParams: { 'new-user': 1 }
    });
  }
}
// Se borro la relacion de club_id en roles, y se elimino la tabla company
// SQL de tablas
// create table
//   public.company (
//     id bigint generated by default as identity not null,
//     created_at timestamp with time zone null default (now() at time zone 'utc'::text),
//     name text not null,
//     descripcion text null,
//     direccion text null,
//     constraint clubes_pkey primary key (id)
//   ) tablespace pg_default;

//   create table
//   public.modules (
//     id bigint generated by default as identity not null,
//     created_at timestamp with time zone null default (now() at time zone 'utc'::text),
//     name text not null,
//     description text null,
//     constraint modules_pkey primary key (id)
//   ) tablespace pg_default;

//   create table
//   public.roles (
//     id bigint generated by default as identity not null,
//     created_at timestamp with time zone null default (now() at time zone 'utc'::text),
//     name text not null,
//     club_id bigint not null,
//     constraint roles_pkey primary key (id),
//     constraint roles_club_id_fkey foreign key (club_id) references company (id)
//   ) tablespace pg_default;

//   create table
//   public.profiles (
//     id bigint generated by default as identity not null,
//     created_at timestamp with time zone null default (now() at time zone 'utc'::text),
//     nombre text null,
//     apellido text null,
//     web text null,
//     user_uuid uuid not null,
//     constraint profiles_pkey primary key (id),
//     constraint profiles_user_uuid_fkey foreign key (user_uuid) references auth.users (id)
//   ) tablespace pg_default;

//   create table
//   public.roles_modules (
//     id_rol bigint not null,
//     created_at timestamp with time zone null default (now() at time zone 'utc'::text),
//     id_module bigint not null,
//     constraint roles_modules_id_rol_fkey foreign key (id_rol) references roles (id),
//     constraint roles_modules_id_module_fkey foreign key (id_module) references modules (id)
//   ) tablespace pg_default;

//   create table
//   public.users (
//     id bigint generated by default as identity not null,
//     created_at timestamp with time zone null default now(),
//     role_id bigint not null,
//     profile_id bigint not null,
//     isactive boolean not null default true,
//     user_id uuid null,
//     constraint users_pkey primary key (id),
//     constraint users_user_id_key unique (id),
//     constraint users_role_id_fkey foreign key (role_id) references roles (id),
//     constraint users_profile_id_fkey foreign key (profile_id) references profiles (id),
//     constraint users_user_id_fkey foreign key (user_id) references auth.users (id)
//   ) tablespace pg_default;